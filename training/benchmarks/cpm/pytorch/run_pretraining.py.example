"""Pytorch Pretraining Example"""

# 标准库
import os
import sys
import time
from typing import Any, Tuple
# 框架库

# benchmarks目录 append到sys.path
CURR_PATH = os.path.abspath(os.path.dirname(__file__))  # pytorch目录
sys.path.append(os.path.abspath(
    os.path.join(CURR_PATH, "../../")))  # benchmarks目录

# 导入model相关的模块、方法、变量
# 自定义模块
from train import trainer_adapter
from driver import Event, dist_pytorch, check, train_helper
from train.evaluator import Evaluator
from train.trainer import Trainer
from train.training_state import TrainingState
from dataloaders.dataloader import build_train_dataset,\
    build_eval_dataset, build_train_dataloader, build_eval_dataloaders
import config
logger = None


def main() -> Tuple(Any, Any, Any):
    global logger
    helper = train_helper.TrainHelper(config)
    model_driver = helper.init_driver(config.name)  # _base.py增加模型名称name
    config.local_rank = helper.get_local_rank()
    logger = model_driver.logger

    dist_pytorch.init_dist_training_env(config)
    check.check_config(config)

    dist_pytorch.barrier()
    model_driver.event(Event.INIT_START)
    init_start_time = logger.previous_log_time

    # TODO 得到seed
    seed: int = 0

    # TODO vendor
    vendor = ""
    helper.set_seed(seed, vendor)

    # TODO  构建dataset, dataloader 【train && validate】
    train_dataset = build_train_dataset()
    eval_dataset = build_eval_dataset()
    train_dataloader = build_train_dataloader()
    eval_dataloader = build_eval_dataloaders()
    print(train_dataset, eval_dataset, train_dataloader)

    # 根据 eval_dataloader 构建evaluator
    evaluator = Evaluator(config, eval_dataloader)

    # 创建TrainingState对象
    training_state = TrainingState()

    # 构建 trainer：依赖 evaluator、TrainingState对象
    trainer = Trainer(driver=model_driver,
                      adapter=trainer_adapter,
                      evaluator=evaluator,
                      training_state=training_state,
                      device=config.device,
                      config=config)
    training_state.trainer = trainer  # 需要添加set方法，不应访问private变量

    # 设置分布式环境, trainer init()
    dist_pytorch.barrier()
    trainer.init()
    dist_pytorch.barrier()

    # evaluation统计
    init_evaluation_start = time.time()
    # TODO evaluate()方法返回值不一致，自定义
    init_evaluation_end = time.time()

    init_evaluation_info = dict(
        # TODO 更新eval相关信息到init_evaluation_info中
        # eval_loss=training_state.eval_avg_loss,
        # eval_embedding_average=training_state.eval_embedding_average,
        time=init_evaluation_end - init_evaluation_start)
    model_driver.event(Event.INIT_EVALUATION, init_evaluation_info)

    # do evaluation
    if not config.do_train:
        return config, training_state, helper
    # init 统计
    model_driver.event(Event.INIT_END)
    init_end_time = logger.previous_log_time
    training_state.init_time = (init_end_time - init_start_time) / 1e+3

    # TRAIN_START
    dist_pytorch.barrier()
    model_driver.event(Event.TRAIN_START)
    raw_train_start_time = logger.previous_log_time

    # TODO 训练过程
    # epoch = -1
    # while training_state.global_steps < config.max_steps and \
    # not training_state.end_training:
    #     epoch += 1
    #     training_state.epoch = epoch
    #     trainer.train_one_epoch(train_dataloader)

    # TRAIN_END事件
    model_driver.event(Event.TRAIN_END)
    raw_train_end_time = logger.previous_log_time
    training_state.raw_train_time = (
        raw_train_end_time - raw_train_start_time) / 1e+3

    return config, training_state, helper


if __name__ == "__main__":
    start = time.time()
    _, state, trainhelper = main()
    if not dist_pytorch.is_main_process():
        sys.exit(0)
    # 训练信息写日志
    finished_info = trainhelper.get_finished_info(start, state)
    logger.log(Event.FINISHED, message=finished_info, stacklevel=0)
